package com.github.dimitryivaniuta.core.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.*;
import java.net.URI;
import java.time.Instant;

/**
 * <h2>Url</h2>
 * <p>Primary entity for the HyperLinker write‑side service.  Each row represents
 * a single shortened link and its metadata.  Redirect requests resolve the
 * <strong>alias</strong> to the <strong>destination</strong> URL.</p>
 *
 * <h3>Lifecycle</h3>
 * <ol>
 *   <li>Created via the REST API (handled in <code>LinkServiceImpl</code>).</li>
 *   <li>Optionally soft‑deleted (GDPR) — <code>deletedAt</code> timestamp set.</li>
 *   <li>Purger job eventually removes the row if a deletion request matures.</li>
 * </ol>
 *
 * <h3>Constraints</h3>
 * <ul>
 *   <li><code>alias</code> is unique and 3–16 chars, enforced by a DB CHECK in
 *       migration <code>V1__core_schema.sql</code>.</li>
 *   <li><code>destination</code> stores the canonical target as text because it
 *       can exceed 2 kB (no varchar limit).</li>
 * </ul>
 */
@Entity
@Table(name = "urls")
@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class Url {

    /**
     * Surrogate primary key.  Generated by the shared <code>ch_unique_id</code>
     * sequence defined in the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Human‑readable or randomly generated slug used in the tiny URL.
     */
    @Column(length = 16, nullable = false, unique = true)
    private String alias;

    /**
     * Absolute destination URI (stored as text).  Cannot be blank.
     */
    @NotBlank
    @Column(columnDefinition = "text", nullable = false)
    private String destination;

    /**
     * Owning user’s external ID.  Used for RBAC and analytics filtering.
     */
    @Column(name = "owner_user_id", nullable = false, updatable = false)
    private Long ownerUserId;

    /**
     * Timestamp when the link was created (UTC).  Defaults in {@link #prePersist()}.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private Instant createdAt;

    /**
     * Optional expiry timestamp.  Redirects past this time return HTTP 410.
     */
    @Column(name = "expires_at")
    private Instant expiresAt;

    /**
     * Soft‑delete marker set by GDPR workflows.  Row remains until purged.
     */
    @Column(name = "deleted_at")
    private Instant deletedAt;

    /**
     * Auto‑populate <code>createdAt</code> before first persistence.
     */
    @PrePersist
    private void prePersist() {
        if (createdAt == null) {
            createdAt = Instant.now();
        }
    }

    /**
     * Returns true if the link is soft‑deleted or expired at the given moment.
     * @param now timestamp to test against
     */
    public boolean isInactive(Instant now) {
        return (deletedAt != null && !deletedAt.isAfter(now)) ||
                (expiresAt != null && expiresAt.isBefore(now));
    }

    /**
     * @return parsed destination as {@link java.net.URI} or throws
     *         {@link java.lang.IllegalArgumentException} if malformed.
     */
    public URI getDestinationUri() {
        return URI.create(destination);
    }
}
