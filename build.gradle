// ============================================================================
// HyperLinker – Root Gradle build script (Groovy DSL)
// ----------------------------------------------------------------------------
// Centralised build logic for all sub‑projects in the mono‑repo.
// Compatible with Gradle 8.14.
// ============================================================================

import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    // Spring plugin is applied selectively per‑module (see bottom)
    id 'org.springframework.boot' version '3.5.1' apply false
    // Brings BOM support
    id 'io.spring.dependency-management' version '1.1.7'
}

group   = 'com.github'
version = '0.1.0-SNAPSHOT'

ext {
    javaVersion      = JavaVersion.VERSION_21
    mapstructVersion = '1.6.3'
    lombokVersion    = '1.18.38'
    junitVersion     = '5.13.1'
}

/**************************************
 * Universal configuration for every module
 **************************************/
subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    java {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        withJavadocJar()
        withSourcesJar()
    }

    repositories { mavenCentral() }

    dependencies {
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compileOnly          "org.projectlombok:lombok:${lombokVersion}"
        testImplementation   "org.junit.jupiter:junit-jupiter:${junitVersion}"
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events TestLogEvent.PASSED, TestLogEvent.FAILED, TestLogEvent.SKIPPED
        }
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes(
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version
            )
        }
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required  = true
            html.required = true
        }
    }
}

/**********************************************************************
 * Spring Boot presets — applied only to service modules
 **********************************************************************/
configure(subprojects.findAll { it.name in ['api', 'core', 'edge', 'analytics'] }) {
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

/**************** Module‑specific dependencies ****************/
project(':common') {
    // Pure Java module – no additional dependencies
}

project(':api') {
    dependencies {
        implementation project(':common')
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    }
}

project(':core') {
    dependencies {
        implementation project(':common')
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.flywaydb:flyway-core'
        runtimeOnly     'org.postgresql:postgresql'
    }
}

project(':edge') {
    dependencies {
        implementation project(':common')
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
        runtimeOnly    'org.postgresql:postgresql'
    }
}

project(':analytics') {
    dependencies {
        implementation project(':common')
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly     'org.postgresql:postgresql'
    }
}

/**************** Utility tasks ****************/
tasks.register('printInfo') {
    group       = 'Help'
    description = 'Prints project version and module list.'
    doLast {
        println "\nHyperLinker – version $version"
        println 'Modules:'
        subprojects.each { println "  • ${it.path}" }
    }
}